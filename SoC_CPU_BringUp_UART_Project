// ******* UART support added to the existing project ******** //
///////////////////////////////////////
// SoC CPU Bring-Up Project - End to End
///////////////////////////////////////

// Project Structure:
// ├── Makefile
// ├── cpu_link.ld
// ├── scp_link.ld
// ├── main.c
// ├── scp.c
// ├── tb_top.sv
// ├── platform_regs.sv
// ├── uart.v
// ├── ram.v

///////////////////////////////////////
// 1. main.c (CPU Firmware)
///////////////////////////////////////

// main.c
#define TEST_ADDR  0x90000000
#define TEST_DATA  0x12345678
#define STATUS_REG 0xF0000010
#define UART_TX_REG 0xF0000020

void print_uart(const char* str) {
    while (*str) {
        *(volatile unsigned int *)UART_TX_REG = *str++;
    }
}

void main() {
    print_uart("CPU Bring-up Test Start\n");

    *(volatile unsigned int *)TEST_ADDR = TEST_DATA;
    unsigned int val = *(volatile unsigned int *)TEST_ADDR;

    if (val == TEST_DATA) {
        print_uart("Test PASS\n");
        *(volatile unsigned int *)STATUS_REG = 0xA5A5A5A5;
    } else {
        print_uart("Test FAIL\n");
        *(volatile unsigned int *)STATUS_REG = 0xDEADBEEF;
    }

    while (1);
}

///////////////////////////////////////
// 2. scp.c (SCP Firmware)
///////////////////////////////////////

// scp.c
#define CORE_RESET_REG     0xF0000000
#define CORE_CLK_EN_REG    0xF0000004
#define BOOT_ADDR_REG      0xF0000008

void scp_main() {
    *(volatile unsigned int *)BOOT_ADDR_REG = 0x80000000;
    *(volatile unsigned int *)CORE_CLK_EN_REG = 0x1;
    *(volatile unsigned int *)CORE_RESET_REG = 0x0;
    while (1);
}

///////////////////////////////////////
// 3. cpu_link.ld
///////////////////////////////////////

ENTRY(_start)
MEMORY { RAM (rwx) : ORIGIN = 0x80000000, LENGTH = 64K }
SECTIONS {
    .text : { *(.text*) *(.rodata*) } > RAM
    .data : { *(.data*) *(.sdata*) } > RAM
    .bss  : { *(.bss*) *(.sbss*) *(COMMON) } > RAM
    . = ALIGN(8);
    end = .;
}

///////////////////////////////////////
// 4. scp_link.ld
///////////////////////////////////////

ENTRY(_start)
MEMORY { SCP_RAM (rwx) : ORIGIN = 0x81000000, LENGTH = 64K }
SECTIONS {
    .text : { *(.text*) *(.rodata*) } > SCP_RAM
    .data : { *(.data*) *(.sdata*) } > SCP_RAM
    .bss  : { *(.bss*) *(.sbss*) *(COMMON) } > SCP_RAM
    . = ALIGN(8);
    end = .;
}

///////////////////////////////////////
// 5. Makefile
///////////////////////////////////////

CROSS = riscv64-unknown-elf-
CFLAGS = -Wall -nostartfiles -march=rv64im -mabi=lp64
LDFLAGS = -Wl,-T

all: cpu.hex scp.hex

cpu.elf: main.c cpu_link.ld
	$(CROSS)gcc $(CFLAGS) -o $@ main.c $(LDFLAGS)cpu_link.ld

scp.elf: scp.c scp_link.ld
	$(CROSS)gcc $(CFLAGS) -o $@ scp.c $(LDFLAGS)scp_link.ld

cpu.hex: cpu.elf
	$(CROSS)objcopy -O verilog cpu.elf cpu.hex

scp.hex: scp.elf
	$(CROSS)objcopy -O verilog scp.elf scp.hex

clean:
	rm -f *.elf *.hex

///////////////////////////////////////
// 6. ram.v
///////////////////////////////////////

module ram #(parameter MEM_DEPTH = 16384, parameter MEM_INIT_FILE = "")(
    input  logic         clk,
    input  logic         rst_n,
    input  logic [31:0]  addr,
    input  logic [31:0]  wdata,
    input  logic         write_en,
    input  logic         read_en,
    output logic [31:0]  rdata
);

    logic [31:0] mem [0:MEM_DEPTH-1];

    initial begin
        if (MEM_INIT_FILE != "")
            $readmemh(MEM_INIT_FILE, mem);
    end

    always_ff @(posedge clk) begin
        if (!rst_n)
            rdata <= 32'b0;
        else if (read_en)
            rdata <= mem[addr[15:2]];
        if (write_en)
            mem[addr[15:2]] <= wdata;
    end
endmodule

///////////////////////////////////////
// 7. uart.v
///////////////////////////////////////

module uart(
    input  logic        clk,
    input  logic        rst_n,
    input  logic        write_en,
    input  logic [7:0]  wdata
);
    always_ff @(posedge clk) begin
        if (!rst_n) begin
            // do nothing
        end else if (write_en) begin
            $write("%c", wdata);
            $fflush();
        end
    end
endmodule

///////////////////////////////////////
// 8. platform_regs.sv
///////////////////////////////////////

module platform_regs(
    input  logic clk,
    input  logic rst_n,
    input  logic write_en,
    input  logic [31:0] addr,
    input  logic [31:0] wdata,
    output logic [31:0] status
);
    logic [31:0] status_reg;
    logic        uart_wr;
    logic [7:0]  uart_data;

    assign status = status_reg;

    uart u_uart (
        .clk(clk),
        .rst_n(rst_n),
        .write_en(uart_wr),
        .wdata(uart_data)
    );

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            status_reg <= 32'b0;
            uart_data <= 8'b0;
            uart_wr <= 1'b0;
        end else begin
            uart_wr <= 1'b0;
            if (write_en) begin
                case (addr)
                    32'hF0000010: status_reg <= wdata;
                    32'hF0000020: begin
                        uart_data <= wdata[7:0];
                        uart_wr <= 1'b1;
                    end
                endcase
            end
        end
    end
endmodule

///////////////////////////////////////
// 9. tb_top.sv
///////////////////////////////////////

module tb_top;

  logic clk, rst_n;
  logic [31:0] status;
  logic [31:0] wr_addr, wr_data;
  logic write_en;

  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end

  initial begin
    rst_n = 0;
    repeat (10) @(posedge clk);
    rst_n = 1;
  end

  platform_regs regs (
    .clk(clk),
    .rst_n(rst_n),
    .write_en(write_en),
    .addr(wr_addr),
    .wdata(wr_data),
    .status(status)
  );

  ram #(.MEM_INIT_FILE("cpu.hex")) u_cpu_ram (...);
  ram #(.MEM_INIT_FILE("scp.hex")) u_scp_ram (...);

  always @(posedge clk) begin
    if (status == 32'hA5A5A5A5) begin
      $display("✅ CPU Bring-Up Test: PASS");
      $finish;
    end else if (status == 32'hDEADBEEF) begin
      $display("❌ CPU Bring-Up Test: FAIL");
      $fatal;
    end
  end
endmodule
